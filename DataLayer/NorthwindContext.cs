using Microsoft.EntityFrameworkCore;

namespace DataLayer.Data
{
    public class NorthwindContext : DbContext
    {
        // DbSet properties
        public DbSet<Category> Categories { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<OrderDetails> OrderDetails { get; set; }

        // Configure the connection string
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseNpgsql("Host=localhost;Database=northwind;Username=postgres;Password=Hejmed12!");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // Map Category
            modelBuilder.Entity<Category>(entity =>
            {
                entity.ToTable("categories");
                entity.HasKey(e => e.Id);

                entity.Property(e => e.Id)
                    .HasColumnName("categoryid")
                    .ValueGeneratedNever(); // Indicate that the value is not generated by the database

                entity.Property(e => e.Name).HasColumnName("categoryname");
                entity.Property(e => e.Description).HasColumnName("description");
            });

            // Map Product
            modelBuilder.Entity<Product>(entity =>
            {
                entity.ToTable("products"); // Use lowercase table name

                entity.Property(e => e.Id).HasColumnName("productid");
                entity.Property(e => e.Name).HasColumnName("productname");
                entity.Property(e => e.UnitPrice).HasColumnName("unitprice");
                entity.Property(e => e.QuantityPerUnit).HasColumnName("quantityperunit");
                entity.Property(e => e.UnitsInStock).HasColumnName("unitsinstock");

                // **Add this line to map CategoryId correctly**
                entity.Property(e => e.CategoryId).HasColumnName("categoryid");

                // Relationships
                entity.HasOne(e => e.Category)
                      .WithMany(c => c.Products)
                      .HasForeignKey(e => e.CategoryId);
            });

            // Map Order
            modelBuilder.Entity<Order>(entity =>
            {
                entity.ToTable("orders");
                entity.Property(e => e.Id).HasColumnName("orderid");
                entity.Property(e => e.Date).HasColumnName("orderdate");
                entity.Property(e => e.Required).HasColumnName("requireddate");
                entity.Property(e => e.Shipped).HasColumnName("shippeddate");
                entity.Property(e => e.Freight).HasColumnName("freight");
                entity.Property(e => e.ShipName).HasColumnName("shipname");
                entity.Property(e => e.ShipCity).HasColumnName("shipcity");
            });

            // Map OrderDetails
            modelBuilder.Entity<OrderDetails>(entity =>
            {
                entity.ToTable("orderdetails");
                entity.HasKey(e => new { e.OrderId, e.ProductId });

                entity.Property(e => e.OrderId).HasColumnName("orderid");
                entity.Property(e => e.ProductId).HasColumnName("productid");

                entity.Property(e => e.UnitPrice)
                      .HasColumnName("unitprice")
                      .HasColumnType("numeric(18, 2)");
                entity.Property(e => e.Quantity).HasColumnName("quantity");
                entity.Property(e => e.Discount).HasColumnName("discount");

                // Relationships
                entity.HasOne(e => e.Order)
                      .WithMany(o => o.OrderDetails)
                      .HasForeignKey(e => e.OrderId);

                entity.HasOne(e => e.Product)
                      .WithMany(p => p.OrderDetails)
                      .HasForeignKey(e => e.ProductId);
            });
        }
    }
}
